import { Injectable } from '@angular/core';

import { TimeAndDateService } from '../timeAndDateService/timeAndDate.service';

import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { NgxChartsModule } from '@swimlane/ngx-charts';


// Chart Service
// Implements formatting and displaying record data in a line chart

@Injectable()
export class ChartService{

  const RECORD_WIDTH = 100;

  public chartData;
  public chartWidth;

  // Chart colors, generated by generateColorScheme()
  public colorScheme = {
      domain: []
  };

  constructor(
    public ngxChartsModule: NgxChartsModule,
    public timeAndDateService: TimeAndDateService
  ){ }

  // Takes records and formarts it for ngx line chart
  // input - an array of json objects, each has a date and values for every column
  // output - an array of json objects, each representing values of a column for every date (series)

  async formatChartData(data, columns){

    let formatted = [];
    let registeredCols = [];

    for(var j = 0; j < data.length; j++){
      let record = data[j];

      for(var i = 0; i < record.Values.length; i++){
        let date = await this.timeAndDateService.formatDate(record.Date);
        let currentCollumn = columns[i].Title;
        let currentColIndex = registeredCols.indexOf(currentCollumn);
        if(currentColIndex < 0){
          formatted.push({
            "name": currentCollumn,
            "series": []
          })
          registeredCols.push(currentCollumn);
          currentColIndex = registeredCols.length - 1;
        }

        formatted[currentColIndex].series.push({
          "name": date,
          "value": parseFloat(record.Values[i])
        })

      }

    }

    this.chartData = formatted;

    // Calculate chart's width based on the number of dates shown
    this.chartWidth = this.chartData[0].series.length * this.RECORD_WIDTH;

    this.generateColorScheme();

  }

  // Choose random green colors for chart's color scheme
  async generateColorScheme(){
    for(var i = 0; i < 10; i++){
      // Random green hue and light
      let hue = Math.floor(Math.random() * (140 - 80) ) + 90;
      let light = Math.floor(Math.random() * (70 - 20) ) + 20;
      this.colorScheme.domain.push("hsl(" + hue + ", 80%, " + light + "%)");
    }
  }

}
